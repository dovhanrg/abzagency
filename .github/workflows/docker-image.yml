name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:

  build-server:

    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: actions/checkout@v4
        name: Check out code

      - uses: mr-smithers-excellent/docker-build-push@v6
        name: Build & push Docker image
        with:
          platform: linux/arm64/v8
          image: dovhanrg/abz-server
          tags: latest, ${{ github.sha }}
          registry: docker.io
          dockerfile: ./server/Dockerfile
          directory: ./server/
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
#          buildArgs: NODE_ENV=${{ secrets.NODE_ENV }}, IP_ADDR=${{ secrets.IP_ADDR }}, DB_HOST=${{ secrets.DB_HOST }}, DB_PORT=3306, DB_USERNAME=${{ secrets.DB_USERNAME }}, DB_PASSWORD=${{ secrets.DB_PASSWORD }}, DATABASE=${{ secrets.DATABASE }}

  build-client:

    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: actions/checkout@v4
        name: Check out code

      - uses: mr-smithers-excellent/docker-build-push@v6
        name: Build & push Docker image
        with:
          platform: linux/arm64/v8
          image: dovhanrg/abz-client
          tags: latest, ${{ github.sha }}
          registry: docker.io
          dockerfile: ./client/Dockerfile
          directory: ./client/
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


  deploy:

    runs-on: ubuntu-latest

    needs:
      - build-server
      - build-client

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Test ssh-agent and upload docker-compose.yml
        working-directory: ./docker
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ls -al
          which ssh-agent
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          rsync -e "ssh -o StrictHostKeyChecking=no" -aP docker-compose.yml deploy-bot@${{ vars.SERVER_ADDRESS }}:/home/deploy-bot/

      - name: deploying updates
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          NODE_ENV: production
          IP_ADDR: ${{ secrets.IP_ADDR }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DATABASE: ${{ secrets.DATABASE }}
        run: |
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          ls -al
          ssh -o "StrictHostKeyChecking accept-new" deploy-bot@${{ vars.SERVER_ADDRESS }} "echo 'Logging in'"
          ssh deploy-bot@${{ vars.SERVER_ADDRESS }} docker ps
          ssh deploy-bot@${{ vars.SERVER_ADDRESS }} docker compose down --rmi=all
          ssh deploy-bot@${{ vars.SERVER_ADDRESS }} MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD" NODE_ENV="$NODE_ENV" IP_ADDR="$IP_ADDR" DB_USERNAME="$DB_USERNAME" DB_PASSWORD="$DB_PASSWORD" DATABASE="$DATABASE" docker compose up -d --pull=always



